{"version":3,"sources":["ng://angular-user-idle/lib/angular-user-idle.config.ts","ng://angular-user-idle/lib/angular-user-idle.service.ts","ng://angular-user-idle/lib/angular-user-idle.module.ts"],"names":["UserIdleConfig","UserIdleService","config","_ngZone","this","timerStart$","Subject","timeout$","idle","timeout","ping","prototype","startWatching","_this","activityEvents$","merge","fromEvent","window","document","idle$","from","idleSubscription","unsubscribe","pipe","bufferTime","filter","arr","length","isIdleDetected","isInactivityTimer","tap","switchMap","runOutsideAngular","interval","takeUntil","timer","next","finalize","subscribe","setupTimer","setupPing","stopWatching","stopTimer","resetTimer","isTimeout","onTimerStart","distinctUntilChanged","start","timer$","of","onTimeout","map","getConfigValue","setConfigValues","closed","console","error","setCustomActivityEvents","customEvents","take","scan","acc","n","count","ping$","Injectable","args","providedIn","decorators","type","Optional","NgZone","UserIdleModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports"],"mappings":"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","sourcesContent":["export class UserIdleConfig {\n  /**\n   * Idle value in seconds.\n   */\n  idle: number;\n  /**\n   * Timeout value in seconds.\n   */\n  timeout: number;\n  /**\n   * Ping value in seconds.\n   */\n  ping: number;\n}\n","import { Injectable, Optional, NgZone } from '@angular/core';\nimport {\n  Observable,\n  Subject,\n  Subscription,\n  merge,\n  fromEvent,\n  from,\n  interval,\n  timer,\n  of\n} from 'rxjs';\nimport {\n  bufferTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  scan,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n/**\n * User's idle service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserIdleService {\n  ping$: Observable<any>;\n\n  /**\n   * Events that can interrupts user's inactivity timer.\n   */\n  protected activityEvents$: Observable<any>;\n\n  protected timerStart$ = new Subject<boolean>();\n  protected timeout$ = new Subject<boolean>();\n  protected idle$: Observable<any>;\n  protected timer$: Observable<any>;\n  /**\n   * Idle value in seconds.\n   * Default equals to 10 minutes.\n   */\n  protected idle = 600;\n  /**\n   * Timeout value in seconds.\n   * Default equals to 5 minutes.\n   */\n  protected timeout = 300;\n  /**\n   * Ping value in seconds.\n   * * Default equals to 2 minutes.\n   */\n  protected ping = 120;\n  /**\n   * Timeout status.\n   */\n  protected isTimeout: boolean;\n  /**\n   * Timer of user's inactivity is in progress.\n   */\n  protected isInactivityTimer: boolean;\n  protected isIdleDetected: boolean;\n\n  protected idleSubscription: Subscription;\n\n  constructor(@Optional() config: UserIdleConfig, private _ngZone: NgZone) {\n    if (config) {\n      this.idle = config.idle;\n      this.timeout = config.timeout;\n      this.ping = config.ping;\n    }\n  }\n\n  /**\n   * Start watching for user idle and setup timer and ping.\n   */\n  startWatching() {\n    this.activityEvents$ = merge(\n      fromEvent(window, 'mousemove'),\n      fromEvent(window, 'resize'),\n      fromEvent(document, 'keydown')\n    );\n\n    this.idle$ = from(this.activityEvents$);\n\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n\n    // If any of user events is not active for idle-seconds when start timer.\n    this.idleSubscription = this.idle$\n      .pipe(\n        bufferTime(500), // Starting point of detecting of user's inactivity\n        filter(\n          arr => !arr.length && !this.isIdleDetected && !this.isInactivityTimer\n        ),\n        tap(() => (this.isIdleDetected = true)),\n        switchMap(() =>\n          this._ngZone.runOutsideAngular(() =>\n            interval(1000).pipe(\n              takeUntil(\n                merge(\n                  this.activityEvents$,\n                  timer(this.idle * 1000).pipe(\n                    tap(() => {\n                      this.isInactivityTimer = true;\n                      this.timerStart$.next(true);\n                    })\n                  )\n                )\n              ),\n              finalize(() => (this.isIdleDetected = false))\n            )\n          )\n        )\n      )\n      .subscribe();\n\n    this.setupTimer(this.timeout);\n    this.setupPing(this.ping);\n  }\n\n  stopWatching() {\n    this.stopTimer();\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n  }\n\n  stopTimer() {\n    this.isInactivityTimer = false;\n    this.timerStart$.next(false);\n  }\n\n  resetTimer() {\n    this.stopTimer();\n    this.isTimeout = false;\n  }\n\n  /**\n   * Return observable for timer's countdown number that emits after idle.\n   */\n  onTimerStart(): Observable<number> {\n    return this.timerStart$.pipe(\n      distinctUntilChanged(),\n      switchMap(start => (start ? this.timer$ : of(null)))\n    );\n  }\n\n  /**\n   * Return observable for timeout is fired.\n   */\n  onTimeout(): Observable<boolean> {\n    return this.timeout$.pipe(\n      filter(timeout => !!timeout),\n      tap(() => (this.isTimeout = true)),\n      map(() => true)\n    );\n  }\n\n  getConfigValue(): UserIdleConfig {\n    return {\n      idle: this.idle,\n      timeout: this.timeout,\n      ping: this.ping\n    };\n  }\n\n  /**\n   * Set config values.\n   * @param config\n   */\n  setConfigValues(config: UserIdleConfig) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set config values');\n      return;\n    }\n\n    if (config.idle) {\n      this.idle = config.idle;\n    }\n    if (config.ping) {\n      this.ping = config.ping;\n    }\n    if (config.timeout) {\n      this.timeout = config.timeout;\n    }\n  }\n\n  /**\n   * Set custom activity events\n   *\n   * @param customEvents Example: merge(\n   *   fromEvent(window, 'mousemove'),\n   *   fromEvent(window, 'resize'),\n   *   fromEvent(document, 'keydown'),\n   *   fromEvent(document, 'touchstart'),\n   *   fromEvent(document, 'touchend')\n   * )\n   */\n  setCustomActivityEvents(customEvents: Observable<any>) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set custom activity events');\n      return;\n    }\n\n    this.activityEvents$ = customEvents;\n  }\n\n  /**\n   * Setup timer.\n   *\n   * Counts every seconds and return n+1 and fire timeout for last count.\n   * @param timeout Timeout in seconds.\n   */\n  protected setupTimer(timeout: number) {\n    this._ngZone.runOutsideAngular(() => {\n      this.timer$ = interval(1000).pipe(\n        take(timeout),\n        map(() => 1),\n        scan((acc, n) => acc + n),\n        tap(count => {\n          if (count === timeout) {\n            this.timeout$.next(true);\n          }\n        })\n      );\n    });\n  }\n\n  /**\n   * Setup ping.\n   *\n   * Pings every ping-seconds only if is not timeout.\n   * @param ping\n   */\n  protected setupPing(ping: number) {\n    this.ping$ = interval(ping * 1000).pipe(filter(() => !this.isTimeout));\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n@NgModule({\n  imports: []\n})\nexport class UserIdleModule {\n  static forRoot(config: UserIdleConfig): ModuleWithProviders {\n    return {\n      ngModule: UserIdleModule,\n      providers: [\n        {provide: UserIdleConfig, useValue: config}\n      ]\n    };\n  }\n}\n"]}